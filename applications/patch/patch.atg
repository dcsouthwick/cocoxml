SECTION license
/*-------------------------------------------------------------------------
 patch.atg
 Copyright (C) 2008, Charles Wang
 Author: Charles Wang  <charlesw123456@gmail.com>
 License: LGPLv2
-------------------------------------------------------------------------*/
END.

SCHEME c Patch

SECTION hIncludes
#ifndef  COCO_PATCHDATA_H
#include "PatchData.h"
#endif
END.

COMPILER Patch

MEMBERS
    int subStart, subNum; CcsBool_t subLastEol;
    int addStart, addNum; CcsBool_t addLastEol;
    PatchFile_t * first, * last;

CONSTRUCTOR
    self->first = self->last = NULL;

DESTRUCTOR
    {
        PatchFile_t * cur, * next;
        for (cur = self->first; cur; cur = next) {
	    next = cur->next;
	    PatchFile_Destruct(cur);
	}
    }

OPTIONS space

TERMINALS piecelines

CHARACTERS
    digit  = "0123456789".
    tab    = '\t'.
    cr     = '\r'.
    lf     = '\n'.
    infoch = ANY - tab - cr - lf - digit.

TOKENS
    number = digit { digit }.
    tab    = tab.
    eol    = (cr lf) | lf.
    infoch = infoch.

PRODUCTIONS

Patch                        (. PatchFile_t * newFilePatch; .) =
  FilePatch<&newFilePatch>   (. self->first = self->last = newFilePatch; .)
  { FilePatch<&newFilePatch> (. if (newFilePatch) {
    			     	    if (self->last) {
				        self->last->next = newFilePatch; self->last = newFilePatch;
				    } else {
				        self->first = self->last = newFilePatch;
				    }
				} .) }
.

FilePatch<PatchFile_t ** filepatch>
    (. CcsPosition_t * subfname, * addfname;
       PatchPiece_t * newPiece; .)
 = { HeadLine } FileSubLine<&subfname> FileAddLine<&addfname>
    (. fprintf(stderr, "Scanning: %s %s\n", subfname->text, addfname->text);
       if (!(*filepatch = PatchFile(subfname->text, addfname->text)))
          PatchParser_SemErrT(self, "Not enough memory");
       CcsPosition_Destruct(subfname);
       CcsPosition_Destruct(addfname); .)
   Piece<&newPiece> (. PatchFile_Append(*filepatch, newPiece); .)
 { Piece<&newPiece> (. PatchFile_Append(*filepatch, newPiece); .) }
.

HeadLine = infoch { ANY } eol.

FileSubLine<CcsPosition_t ** subfname> (. CcsToken_t * beg; .) =
  "--- "    (. PatchScanner_TokenIncRef(&self->scanner, beg = self->la); .)
  { ANY }   (. *subfname = PatchScanner_GetPosition(&self->scanner, beg, self->la);
    	       PatchScanner_TokenDecRef(&self->scanner, beg); .)
  [ tab { ANY }] eol
.

FileAddLine<CcsPosition_t ** addfname> (. CcsToken_t * beg; .) =
  "+++ "    (. PatchScanner_TokenIncRef(&self->scanner, beg = self->la); .)
  { ANY }   (. *addfname = PatchScanner_GetPosition(&self->scanner, beg, self->la);
    	       PatchScanner_TokenDecRef(&self->scanner, beg); .)
  [ tab { ANY }] eol
.

SECTION SubScanners
typedef struct {
    CcsToken_t base;
    PatchLine_t * lines;
}  PatchToken_t;
static void PatchToken_Destruct(CcsToken_t * self)
{
    PatchToken_t * pself = (PatchToken_t *)self;
    if (pself->lines) PatchLineList_Destruct(pself->lines);
    CcsFree(self);
}

static CcsToken_t *
PatchSubScanner_LineList(PatchParser_t * self, const char * fname,
			 int pos, int line, int col)
{
    PatchLine_t * lines;
    CcsBool_t subLastEol, addLastEol;
    PatchToken_t * token;

    subLastEol = addLastEol = TRUE;
    lines = PatchLineList(&self->scanner, self->subStart, self->subNum,
    	    		  self->addStart, self->addNum, &subLastEol, &addLastEol);
    token = CcsMalloc(sizeof(PatchToken_t));
    token->base.next = NULL;
    token->base.destructor = PatchToken_Destruct;
    token->base.input = self->scanner.cur;
    token->base.refcnt = 1;
    token->base.kind = PatchScanner_piecelines;
    token->base.loc.fname = fname;
    token->base.loc.line = line;
    token->base.loc.col = col;
    token->base.pos = pos;
    token->base.val = NULL;
    token->lines = lines;
    return &token->base;
}
END.

Piece<PatchPiece_t ** piece> =
  "@@" ' ' { ' ' } '-' number     (. self->subStart = atoi(self->t->val); self->subNum = 0; .)
  [',' number                     (. self->subNum = atoi(self->t->val); .)
  ] ' ' { ' ' } '+' number        (. self->addStart = atoi(self->t->val); self->addNum = 0; .)
  [',' number                     (. self->addNum = atoi(self->t->val); .)
  ] ' ' { ' ' } "@@" { ANY } eol<LineList> piecelines
    (. *piece = PatchPiece(self->subStart, self->subNum, self->addStart, self->addNum,
       	      		   ((PatchToken_t *)(self->t))->lines, self->subLastEol, self->addLastEol);
       ((PatchToken_t *)(self->t))->lines = NULL; .)
.

END Patch.
