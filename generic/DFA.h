/*-------------------------------------------------------------------------
  Author (C) 2008, Charles Wang <charlesw123456@gmail.com>

  This program is free software; you can redistribute it and/or modify it 
  under the terms of the GNU General Public License as published by the 
  Free Software Foundation; either version 2, or (at your option) any 
  later version.

  This program is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
  for more details.

  You should have received a copy of the GNU General Public License along 
  with this program; if not, write to the Free Software Foundation, Inc., 
  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

  As an exception, it is allowed to write an extension of Coco/R that is
  used as a plugin in non-free software.

  If not otherwise stated, any source code generated by Coco/R (other than 
  Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
#ifndef  COCO_DFA_H
#define  COCO_DFA_H

#include <stdio.h>

#ifndef  COCO_CHARSET_H
#include  "CharSet.h"
#endif

EXTC_BEGIN

struct State_s {
    int        nr;
    Action_t * firstAction;
    Symbol_t * endOf;
    int        ctx;
    State_t  * next;
};

State_t * State(State_t * self);
void State_Destruct(State_t * self);
void State_AddAction(State_t * self, Action_t * act);
void State_DetachAction(State_t * self, Action_t * act);
int State_MeltWith(State_t * self, State_t * s);

struct Action_s {
    int        typ;
    int        sym;
    int        tc;
    Target_t * target;
    Action_t * next;
};

Action_t * Action(Action_t * self, int typ, int sym, int tc);
void Action_Destruct(Action_t * self);
void Action_AddTarget(Action_t * self, Target_t * t);
int Action_AddTargets(Action_t * self, Action_t * a);
CharSet_t * Action_Symbols(Action_t * self, Tab_t * tab);
void Action_ShiftWith(Action_t * self, CharSet_t * s, Tab_t * tab);

struct Target_s {
    State_t  * state;
    Target_t * next;
};

Target_t * Target(Target_t * self, State_t * s);
void Target_Destruct(Target_t * self);

struct Melted_s {
    BitArray_t * set;
    State_t    * state;
    Melted_t   * next;
};

Melted_t * Melted(Melted_t * self, BitArray_t * set, State_t * state);

struct Comment_s {
    char      * start;
    char      * stop;
    gboolean    nested;
    Comment_t * next;
};

Comment_t *
Comment(Comment_t * self, const char * start, const char * stop,
	gboolean nested);

struct DFA_s {
    /* Private members. */
    int         maxStates;
    int         lastStateNr;
    State_t   * firstState;
    State_t   * lastState;
    int         lastSimState;
    FILE      * fram;
    FILE      * gen;
    Symbol_t  * curSy;
    gboolean    dirtyDFA;
    gboolean    ignoreCase;
    gboolean    hasCtxMoves;
    Parser_t  * parser;
    Tab_t     * tab;
    Errors_t  * errors;
    FILE      * trace;

    Melted_t  * firstMelted;
    Comment_t * firstComment;
};

DFA_t * DFA(DFA_t * self, Parser_t * parser);

State_t * DFA_ConvertToStates(DFA_t * self, Node_t * p, Symbol_t * sym);
void DFA_MatchLiteral(DFA_t * self, const char * s, Symbol_t * sym);
void DFA_MakeDeterministic(DFA_t * self);
void DFA_PrintStates(DFA_t * self);
Action_t * DFA_FindAction(DFA_t * self, State_t * state, char ch);
void DFA_GetTargetStates(DFA_t * self, Action_t * a, BitArray_t * targets,
			 Symbol_t * endOf, gboolean * ctx);

Melted_t * DFA_NewMelted(DFA_t * self, BitArray_t * set, State_t * state);
BitArray_t * DFA_MeltedSet(DFA_t * self, int nr);
Melted_t * DFA_StateWithSet(DFA_t * self, BitArray_t * s);
void DFA_NewComment(DFA_t * self, Node_t * from, Node_t * to, gboolean nested);
void DFA_WriteScanner(DFA_t * self);

EXTC_END

#endif  /* COCO_DFA_H */
