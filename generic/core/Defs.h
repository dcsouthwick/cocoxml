/*-------------------------------------------------------------------------
  Author (C) 2008, Charles Wang <charlesw123456@gmail.com>

  This program is free software; you can redistribute it and/or modify it 
  under the terms of the GNU General Public License as published by the 
  Free Software Foundation; either version 2, or (at your option) any 
  later version.

  This program is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
  for more details.

  You should have received a copy of the GNU General Public License along 
  with this program; if not, write to the Free Software Foundation, Inc., 
  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

  As an exception, it is allowed to write an extension of Coco/R that is
  used as a plugin in non-free software.

  If not otherwise stated, any source code generated by Coco/R (other than 
  Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
#ifndef  COCO_DEFS_H
#define  COCO_DEFS_H

#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>

#ifdef  __cplusplus
#define EXTC_BEGIN extern "C" {
#define EXTC_END   }
#else
#define EXTC_BEGIN
#define EXTC_END
#endif

EXTC_BEGIN

typedef int    CcBool_t;
#define FALSE  0
#define TRUE   1

/* Basic DataStructures */
typedef struct CcObjectType_s CcObjectType_t;
typedef struct CcObject_s CcObject_t;
typedef struct CcArrayList_s CcArrayList_t;
typedef struct CcBitArray_s CcBitArray_t;
typedef struct CcHashTable_s CcHashTable_t;


/* EBNF types */
typedef struct CcNodeType_s CcNodeType_t;
typedef struct CcNode_s  CcNode_t;
typedef struct CcGraph_s CcGraph_t;

extern const CcNodeType_t * node_alt;
extern const CcNodeType_t * node_iter;
extern const CcNodeType_t * node_opt;

/* OutputScheme types. */
typedef struct CcOutputSchemeType_s CcOutputSchemeType_t;
typedef struct CcOutputScheme_s CcOutputScheme_t;
typedef struct CcSourceOutputSchemeType_s CcSourceOutputSchemeType_t;
typedef struct CcSourceOutputScheme_s CcSourceOutputScheme_t;

/* Algorithm types */
typedef struct CcLexical_s CcLexical_t;
typedef struct CcSyntax_s CcSyntax_t;
typedef struct CcSymbolTable_s CcSymbolTable_t;

/* Symbol */
typedef struct CcSymbol_s CcSymbol_t;

/* Lexical types */
typedef struct CcCharSet_s CcCharSet_t;
typedef struct CcCharClass_s CcCharClass_t;
typedef struct CcComment_s CcComment_t;
typedef struct CcAction_s CcAction_t;
typedef struct CcState_s CcState_t;
typedef struct CcTarget_s CcTarget_t;

/* C Scheme types */
typedef struct CcsErrorPool_s CcsErrorPool_t;
typedef struct CcsPosition_s CcsPosition_t;
typedef struct CcsScanner_s CcsScanner_t;
typedef struct CcsParser_s CcsParser_t;

#define CocoMalloc(size) _CocoMalloc_(size, __FILE__, __LINE__)
void * _CocoMalloc_(size_t size, const char * fname, int line);

#define CocoRealloc(ptr, size) _CocoRealloc_(ptr, size, __FILE__, __LINE__)
void * _CocoRealloc_(void * ptr, size_t size, const char * fname, int line);

#define CocoFree(ptr) _CocoFree_(ptr, __FILE__, __LINE__)
void _CocoFree_(void * ptr, const char * fname, int line);

#define CocoStrdup(str) _CocoStrdup_(str, __FILE__, __LINE__)
char * _CocoStrdup_(const char * str, const char * fname, int line);

#define AllocObject(self, szobj) _AllocObject_(self, szobj, __FILE__, __LINE__)
void * _AllocObject_(void * self, size_t szobj, const char * fname, int line);

typedef struct {
    CcsScanner_t     * scanner;
    CcsParser_t      * parser;
    CcsErrorPool_t   * error;

    CcOutputScheme_t * outputScheme;
    CcSymbolTable_t  * symbolTab;
    CcLexical_t      * lexical;
    CcSyntax_t       * syntax;
} CcGlobals_t;

EXTC_END

#endif /* COCO_DEFS_H */
