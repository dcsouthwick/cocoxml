/*-------------------------------------------------------------------------
CocoXml.atg -- Attributed Grammar
Compiler Generator CocoXml/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University
Charles Wang modify it to CocoXml.atg.

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of CocoXml/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by CocoXml/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------
 compile with:
   Coco CocoXml.atg -namespace at.jku.ssw.CocoXml
-------------------------------------------------------------------------*/

using System.IO;
using System.Collections;

COMPILER CocoXml

	const int id = 0;
	const int str = 1;
	
	public TextWriter trace;    // other Coco objects referenced in this ATG
	public Tab tab;
        public XmlScannerData xsdata;
	public ParserGen pgen;

	bool   genScanner;

/*-------------------------------------------------------------------------*/

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable = '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS
	ident     = ( letter | '_' ) { letter | digit | '_' }.
	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

PRAGMAS
	ddtSym    = '$' { digit | letter }.  (. tab.SetDDT(la.val); .)

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

CocoXml                         (. Symbol sym;
				 Graph g;
				 string gramName;
				 XmlLangDefinition xldef; .)
=
  [ UsingDecl<out pgen.usingPos> ]

  "COMPILER"                    (. genScanner = true; .)
  ident                         (. gramName = t.val;
                                   int beg = la.pos; 
                                 .)
  { ANY }                       (. tab.semDeclPos = new Position(beg, la.pos-beg, 0); .)

  XmlLangDefinition<out xldef>  (. xsdata.Add("", xldef); .)

  { XmlNamespaceDeclaration }

  SYNC 
  "PRODUCTIONS"                 (. tab.DeleteNodes(); .)
  { ident                       (. sym = tab.FindSym(t.val);
                                   bool undef = sym == null;
                                   if (undef) sym = tab.NewSym(Node.nt, t.val, t.line);
                                   else {
                                     if (sym.typ == Node.nt) {
                                       if (sym.graph != null) SemErr("name declared twice");
                                   	 } else SemErr("this symbol kind not allowed on left side of production");
                                   	 sym.line = t.line;
                                   }
                                   bool noAttrs = sym.attrPos == null;
                                   sym.attrPos = null;
                                 .)
    [ AttrDecl<sym> ]           (. if (!undef)
                                     if (noAttrs != (sym.attrPos == null))
                                       SemErr("attribute mismatch between declaration and use of this symbol");
                                 .)
    [ SemText<out sym.semPos> ] WEAK
    '='
    Expression<out g>           (. sym.graph = g.l;
                                   tab.Finish(g);
                                 .)
                                WEAK
    '.'
  }
  "END" ident                   (. if (gramName != t.val)
                                     SemErr("name does not match grammar name");
                                   tab.gramSy = tab.FindSym(gramName);
                                   if (tab.gramSy == null)
                                     SemErr("missing production for grammar name");
                                   else {
                                     sym = tab.gramSy;
                                     if (sym.attrPos != null)
                                       SemErr("grammar symbol must not have attributes");
                                   }
                                   tab.noSym = tab.NewSym(Node.t, "???", 0); // noSym gets highest number
                                   tab.SetupAnys();
                                   tab.RenumberPragmas();
                                   if (tab.ddt[2]) tab.PrintNodes();
                                   if (errors.count == 0) {
                                     Console.WriteLine("checking");
                                     tab.CompSymbolSets();
                                     if (tab.ddt[7]) tab.XRef();
                                     if (tab.GrammarOk()) {
                                       Console.Write("parser");
                                       pgen.WriteXmlParser();
                                       if (genScanner) {
                                         Console.Write(" + scanner");
                                         xsdata.WriteXmlScanner();
                                         /*if (tab.ddt[0]) xsdata.PrintStates();*/
                                       }
                                       Console.WriteLine(" generated");
                                       if (tab.ddt[8]) pgen.WriteStatistics();
                                     }
                                   }
                                   if (tab.ddt[6]) tab.PrintSymbolTable();
                                 .)
  '.'
.

/*------------------------------------------------------------------------------------*/

XmlNamespaceDeclaration          (. string namespace_name;
				  XmlLangDefinition xldef; .)
=
  "NAMESPACE"
  string                         (. namespace_name = t.val; .)
  "{"
  XmlLangDefinition<out xldef>   (. xsdata.Add(namespace_name, xldef); .)
  "}"
.

/*------------------------------------------------------------------------------------*/

XmlLangDefinition<out XmlLangDefinition xldef>
=  (. xldef = new XmlLangDefinition(tab, errors);  .)
  [ "OPTIONS" { OptionDecl<xldef> } ]
  [ "TAGS" { XmlTagDecl<xldef> } ]
  [ "ATTRS" { XmlAttrDecl<xldef> } ]
  [ "PROCESSING_INSTRUCTIONS" { ProcessingInstruction<xldef> } ]
.

/*------------------------------------------------------------------------------------*/
/* For the possible values, ses XSData.cs. */
OptionDecl<XmlLangDefinition xldef>
=
  ident (. xldef.AddOption(t.val, t.line); .)
.

/*------------------------------------------------------------------------------------*/

XmlTagDecl<XmlLangDefinition xldef>   (. string tokenName; .)
=
  ident    (. tokenName = t.val; .)
  "="
  string   (. xldef.AddTag(t.val, tokenName, t.line); .)
.

/*------------------------------------------------------------------------------------*/

XmlAttrDecl<XmlLangDefinition xldef>  (. string tokenName; .)
=
  ident    (. tokenName = t.val; .)
  "="
  string   (. xldef.AddAttr(t.val, tokenName, t.line); .)
.

/*------------------------------------------------------------------------------------*/

ProcessingInstruction<XmlLangDefinition xldef>   (. string tokenName; .)
=
  ident    (. tokenName = t.val; .)
  "="
  string   (. xldef.AddProcessingInstruction(t.val, tokenName, t.line); .)
.

/*------------------------------------------------------------------------------------*/

AttrDecl<Symbol sym>
=
  '<'                           (. int beg = la.pos; int col = la.col; .)
  { ANY
  | badString                   (. SemErr("bad string in attributes"); .)
  }
  '>'                           (. if (t.pos > beg)
                                     sym.attrPos = new Position(beg, t.pos - beg, col); .)
| "<."                          (. int beg = la.pos; int col = la.col; .)
  { ANY
  | badString                   (. SemErr("bad string in attributes"); .)
  }
  ".>"                          (. if (t.pos > beg)
                                     sym.attrPos = new Position(beg, t.pos - beg, col); .)
.

/*------------------------------------------------------------------------------------*/

Expression<out Graph g>         (. Graph g2; .)
= 
  Term<out g>                   (. bool first = true; .)
  {                             WEAK
    '|'
    Term<out g2>                (. if (first) { tab.MakeFirstAlt(g); first = false; }
                                   tab.MakeAlternative(g, g2);
                                 .)
  }
.

/*------------------------------------------------------------------------------------*/

Term<out Graph g>               (. Graph g2; Node rslv = null; g = null; .)
=
( [                             (. rslv = tab.NewNode(Node.rslv, null, la.line); .)
    Resolver<out rslv.pos>      (. g = new Graph(rslv); .)
  ]
  Factor<out g2>                (. if (rslv != null) tab.MakeSequence(g, g2);
                                   else g = g2;
                                 .)
  { Factor<out g2>              (. tab.MakeSequence(g, g2); .)
  }
|                               (. g = new Graph(tab.NewNode(Node.eps, null, 0)); .)
)                               (. if (g == null) // invalid start of Term
                                     g = new Graph(tab.NewNode(Node.eps, null, 0));
                                 .)
.

/*------------------------------------------------------------------------------------*/

Factor<out Graph g>             (. string name; int kind; Position pos; bool weak = false; 
                                   g = null;
                                 .)
=
( [ "WEAK"                      (. weak = true; .)
  ]
  Sym<out name, out kind>       (. Symbol sym = tab.FindSym(name);
                                   if (sym == null && kind == str)
                                     sym = tab.literals[name] as Symbol;
                                   bool undef = sym == null;
                                   if (undef) {
                                     if (kind == id)
                                       sym = tab.NewSym(Node.nt, name, 0);  // forward nt
                                     else if (genScanner) { 
                                       sym = tab.NewSym(Node.t, name, t.line);
                                     } else {  // undefined string in production
                                       SemErr("undefined string in production");
                                       sym = tab.eofSy;  // dummy
                                     }
                                   }
                                   int typ = sym.typ;
                                   if (typ != Node.t && typ != Node.nt)
                                     SemErr("this symbol kind is not allowed in a production");
                                   if (weak)
                                     if (typ == Node.t) typ = Node.wt;
                                     else SemErr("only terminals may be weak");
                                   Node p = tab.NewNode(typ, sym, t.line);
                                   g = new Graph(p);
                                 .)
  [ Attribs<p>                  (. if (kind != id) SemErr("a literal must not have attributes"); .)
  ]                             (. if (undef)
                                     sym.attrPos = p.pos;  // dummy
                                   else if ((p.pos == null) != (sym.attrPos == null))
                                     SemErr("attribute mismatch between declaration and use of this symbol");
                                 .)
| '(' Expression<out g> ')'
| '[' Expression<out g> ']'     (. tab.MakeOption(g); .)
| '{' Expression<out g> '}'     (. tab.MakeIteration(g); .)
| SemText<out pos>              (. Node p = tab.NewNode(Node.sem, null, 0);
                                   p.pos = pos;
                                   g = new Graph(p);
                                 .)
| "ANY"                         (. Node p = tab.NewNode(Node.any, null, 0);  // p.set is set in tab.SetupAnys
                                   g = new Graph(p);
                                 .)
| "SYNC"                        (. Node p = tab.NewNode(Node.sync, null, 0);
                                   g = new Graph(p);
                                 .)
)                               (. if (g == null) // invalid start of Factor
                                     g = new Graph(tab.NewNode(Node.eps, null, 0));
                                 .)
.

/*------------------------------------------------------------------------------------*/

Resolver<out Position pos>   
=
  "IF" "("                       (. int beg = la.pos; int col = la.col; .)
  Condition                      (. pos = new Position(beg, t.pos - beg, col); .)
.

/*------------------------------------------------------------------------------------*/

Condition = { "(" Condition | ANY } ")" .

/*------------------------------------------------------------------------------------*/

Sym<out string name, out int kind>
=                               (. name = "???"; kind = id; .)
( ident                         (. kind = id; name = t.val; .)
| (string                       (. name = t.val; .)
  | char                        (. name = "\"" + t.val.Substring(1, t.val.Length-2) + "\""; .)
  )                             (. kind = str;
                                   if (name.IndexOf(' ') >= 0)
                                     SemErr("literal tokens must not contain blanks"); .)
)
.

/*------------------------------------------------------------------------------------*/

Attribs<Node p>
=
  '<'                           (. int beg = la.pos; int col = la.col; .)
  { ANY 
  | badString                   (. SemErr("bad string in attributes"); .)
  }
  '>'                           (. if (t.pos > beg) p.pos = new Position(beg, t.pos - beg, col); .)
| "<."                          (. int beg = la.pos; int col = la.col; .)
  { ANY 
  | badString                   (. SemErr("bad string in attributes"); .)
  }
  ".>"                          (. if (t.pos > beg) p.pos = new Position(beg, t.pos - beg, col); .)
.

/*------------------------------------------------------------------------------------*/

SemText<out Position pos>
=
  "(."                          (. int beg = la.pos; int col = la.col; .)
  { ANY
  | badString                   (. SemErr("bad string in semantic action"); .)
  | "(."                        (. SemErr("missing end of previous semantic action"); .)
  }
  ".)"                          (. pos = new Position(beg, t.pos - beg, col); .)
.

/*------------------------------------------------------------------------------------*/

UsingDecl<out Position pos>
=
  "using"                       (. int beg = t.pos; .)
  { ANY } ';'                   (. int end = t.pos; .)
  { "using" { ANY } ';'         (. end = t.pos; .)
  }                             (. pos = new Position(beg, end - beg + 1, 0); .)
.
  
END CocoXml.
