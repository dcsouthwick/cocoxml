/* -*- csharp -*- */
/*----------------------------------------------------------------------
Compiler Generator CocoXml/R,
Copyright (c) 2008 Charles Wang <charlesw123456@gmail.com>

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of CocoXml/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by CocoXml/R (other than 
CocoXml/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
/*---- Begin ----*/
using System;
using System.IO;
using System.Collections;
using System.Xml;

/*---- Namespace ----*/

public class Token {
/*---- OptionTokens ----*/
    public int kind;
    public int col;
    public int line;
    public string val;
}

public class XmlLangDefinition {
    public bool[] useVector = new bool[Token.numOptions];
    public Hashtable Tags;
    public Hashtable Attrs;
}

public class XmlScanner {
    enum XSStatus { XSCommon, XSFirstAttr, XSNextAttr };

    const char EOL = '\n';
    const int eofSym = 0;
    const int textSym = 1;

    Stream stream;
    XmlTextReader xmlreader;
    XSStatus status;
    string nsURI;
    ArrayList tokens;
    int peek;

    Hashtable XmlLangMap;
/*---- Declarations ----*/

    public XmlScanner (string fileName) {
	try {
	    stream = new FileStream(fileName, FileMode.Open,
				    FileAccess.Read, FileShare.Read);
	    Init();
	} catch (IOException) {
	    throw new FatalError("Can not open file " + fileName);
	}
    }

    public XmlScanner (Stream s) {
	stream = s;
	Init();
    }

    void Init() {
	XmlLangDefinition curXLDef;
	xmlreader = new XmlTextReader(stream);
	status = XSStatus.XSCommon;
	tokens = new ArrayList();
	peek = 0;

/*---- Initialization ----*/
    }

    int StartElement2Kind(string NamespaceURI, string TagName) {
	return 0;
    }

    int EndElement2Kind(string NamespaceURI, string TagName) {
	return 0;
    }

    int Attribute2Kind(string NamespaceURI, string AttrName) {
	return 0;
    }

    void AppendToken() {
	Token new_token = null;
	switch (status) {
	case XSStatus.XSCommon:
	    new_token = new Token();
	    if (!xmlreader.Read()) {
		new_token.kind = eofSym;
	    } else {
		switch (xmlreader.NodeType) {
		case XmlNodeType.Element:
		    new_token.kind = StartElement2Kind(xmlreader.NamespaceURI,
						       xmlreader.Name);
		    nsURI = xmlreader.NamespaceURI;
		    status = XSStatus.XSFirstAttr;
		    break;
		case XmlNodeType.EndElement:
		    new_token.kind = EndElement2Kind(xmlreader.NamespaceURI,
						     xmlreader.Name);
		    break;
		case XmlNodeType.Text:
		    if (useKindVector[(int)Token.OptionTokens.TEXT] >= 0) {
		    }
		    break;
		case XmlNodeType.Whitespace:
		    if (useKindVector[(int)Token.OptionTokens.WHITESPACE] >= 0) {
		    }
		    break;
		case XmlNodeType.Comment:
		    if (useKindVector[(int)Token.OptionTokens.COMMENT] >= 0) {
		    }
		    break;
		case XmlNodeType.ProcessingInstruction:
		    if (useKindVector[(int)Token.OptionTokens.PROCESSING_INSTRUCTION] >= 0) {
		    }
		    break;
		default: // Omit the others.
		    break;
		}
	    }
	    break;
	case XSStatus.XSFirstAttr:
	    if (!xmlreader.MoveToFirstAttribute()) {
		status = XSStatus.XSCommon;
		AppendToken();
		return;
	    }
	    status = XSStatus.XSNextAttr;
	    new_token = new Token();
	    new_token.kind = Attribute2Kind(xmlreader.NamespaceURI,
					    xmlreader.Name);
	    break;
	case XSStatus.XSNextAttr:
	    if (!xmlreader.MoveToNextAttribute()) {
		status = XSStatus.XSCommon;
		AppendToken();
		return;
	    }
	    new_token = new Token();
	    new_token.kind = Attribute2Kind(xmlreader.NamespaceURI,
					    xmlreader.Name);
	    break;
	}
	new_token.line = xmlreader.LineNumber;
	new_token.col = xmlreader.LinePosition;
	new_token.val = xmlreader.Value;
	tokens.Add(new_token);
    }

    public Token Scan () {
	Token token;
	if (tokens.Count == 0) AppendToken();
	token = (Token)tokens[0];
	tokens.Remove(0);
	return token;
    }

    public Token Peek () {
	if (peek == tokens.Count) AppendToken();
	return (Token)tokens[peek ++];
    }

    public void ResetPeek () { peek = 0; }
}

/*---- $$$ ----*/
