/*-------------------------------------------------------------------------
  Author (C) 2008, Charles Wang <charlesw123456@gmail.com>

  This program is free software; you can redistribute it and/or modify it 
  under the terms of the GNU General Public License as published by the 
  Free Software Foundation; either version 2, or (at your option) any 
  later version.

  This program is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
  for more details.

  You should have received a copy of the GNU General Public License along 
  with this program; if not, write to the Free Software Foundation, Inc., 
  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

  As an exception, it is allowed to write an extension of Coco/R that is
  used as a plugin in non-free software.

  If not otherwise stated, any source code generated by Coco/R (other than 
  Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
#ifndef  COCO_TAB_H
#define  COCO_TAB_H

#include <stdio.h>
#include <glib/ghash.h>

#ifndef  COCO_BITARRAY_H
#include "BitArray.h"
#endif

EXTC_BEGIN

struct Node_s {
    int          n;
    int          typ;
    Node_t     * next;
    Node_t     * down;
    Node_t     * sub;
    gboolean     up;
    Symbol_t   * sym;
    int          val;
    int          code;
    BitArray_t * set;
    Position_t * pos;
    int          line;
    State_t    * state;
};

Node_t * Node(Node_t * self, int typ, Symbol_t * sym, int line);

struct Graph_s {
    Node_t * l;
    Node_t * r;
};

Graph_t * Graph(Graph_t * self);
Graph_t * GraphLR(Graph_t * self, Node_t * left, Node_t * right);
Graph_t * GraphP(Graph_t * self, Node_t * p);

struct CharClass_s {
    int n;
    char * name;
    CharSet_t * set;
};

CharClass_t *
CharClass(CharClass_t * self, const char * name, CharSet_t * s);

struct Tab_s {
    Position_t * semDeclPos;
    CharSet_t  * ignored;
    gboolean     ddt[10];
    Symbol_t   * gramSy;
    Symbol_t   * eofSy;
    Symbol_t   * noSym;
    BitArray_t   allSyncSets;
    GHashTable * literals;
    char       * srcName;
    char       * srcDir;
    char       * nsName;
    char       * frameDir;
    char       * outDir;

    BitArray_t   visited;
    Symbol_t   * curSy;

    Parser_t   * parser;
    FILE       * trace;
    Errors_t   * errors;

    GList        terminals;
    GList        pragmas;
    GList        nonterminals;

    GList        nodes;
    Node_t     * dummyNode;

    GList        classes;
    int          dummyName;
};

Tab_t * Tab(Tab_t * self, Parser_t * parser);
Symbol_t * Tab_NewSym(Tab_t * self, int typ, const char * name, int line);
Symbol_t * Tab_FindSym(Tab_t * self, const char * name);
int Tab_Num(Tab_t * self, Node_t * p);
void Tab_PrintSym(Tab_t * self, Symbol_t * sym);
void Tab_PrintSymbolTable(Tab_t * self);
void Tab_PrintSet(Tab_t * self, BitArray_t * s, int index);

Node_t * Tab_NewNodeTSL(Tab_t * self, int typ, Symbol_t * sym, int line);
Node_t * Tab_NewNodeTS(Tab_t * self, int typ, Node_t * sub);
Node_t * Tab_NewNodeTVL(Tab_t * self, int typ, int val, int line);
void Tab_MakeFirstAlt(Tab_t * self, Graph_t * g);
void Tab_MakeAlternative(Tab_t * self, Graph_t * g1, Graph_t * g2);
void Tab_MakeSequence(Tab_t * self, Graph_t * g1, Graph_t * g2);
void Tab_MakeIteration(Tab_t * self, Graph_t * g);
void Tab_MakeOption(Tab_t * self, Graph_t * g);
void Tab_Finish(Tab_t * self, Graph_t * g);
void Tab_DeleteNodes(Tab_t * self);
Graph_t * Tab_StrToGraph(Tab_t * self, const char * str);
void Tab_SetContextTrans(Tab_t * self, Node_t * p);

gboolean DelGraph(Node_t * p);
gboolean DelSubGraph(Node_t * p);
gboolean DelNode(Node_t * p);

int Ptr(Node_t * p, gboolean up);
void Pos(char * buf, size_t szbuf, const Position_t * pos);
void Name(char * buf, size_t szbuf, const char * name);

void Tab_PrintNodes(Tab_t * self);

CharClass_t * Tab_NewCharClass(Tab_t * self, const char * name, CharSet_t * s);
CharClass_t * Tab_FindCharClassS(Tab_t * self, const char * name);
CharClass_t * Tab_FindCharClassC(Tab_t * self, CharSet_t * s);
CharSet_t * Tab_CharClassSet(Tab_t * self, int i);

void Ch(char * buf, size_t szbuf, int ch);
void WriteCharSet(char * buf, size_t szbuf, CharSet_t * s);
void Tab_WriteCharClasses(Tab_t * self);

BitArray_t * Tab_First(Tab_t * self, Node_t * p);
BitArray_t * Tab_Expected(Tab_t * self, Node_t * p, Symbol_t * curSy);
BitArray_t * Tab_Expected0(Tab_t * self, Node_t * p, Symbol_t * curSy);
void Tab_SetupAnys(Tab_t * self);
void Tab_CompDeletableSymbols(Tab_t * self);
void Tab_RenumberPragmas(Tab_t * self);
void Tab_CompSymbolSets(Tab_t * self);

gboolean Tab_GrammerOk(Tab_t * self);
gboolean Tab_NoCircularProductions(Tab_t * self);
void Tab_CheckLL1(Tab_t * self);
void Tab_CheckResolvers(Tab_t * self);
gboolean Tab_NtsComplete(Tab_t * self);
gboolean Tab_AllNtReached(Tab_t * self);
gboolean Tab_AllNtToTerm(Tab_t * self);
void Tab_XRef(Tab_t * self);
void Tab_SetDDT(Tab_t * self, const char * s);

EXTC_END

#endif  /* COCO_TAB_H */
