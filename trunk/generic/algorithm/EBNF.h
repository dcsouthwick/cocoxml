/*-------------------------------------------------------------------------
  Author (C) 2008, Charles Wang <charlesw123456@gmail.com>

  This program is free software; you can redistribute it and/or modify it 
  under the terms of the GNU General Public License as published by the 
  Free Software Foundation; either version 2, or (at your option) any 
  later version.

  This program is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
  for more details.

  You should have received a copy of the GNU General Public License along 
  with this program; if not, write to the Free Software Foundation, Inc., 
  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

  As an exception, it is allowed to write an extension of Coco/R that is
  used as a plugin in non-free software.

  If not otherwise stated, any source code generated by Coco/R (other than 
  Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
#ifndef  COCO_EBNF_H
#define  COCO_EBNF_H

#ifndef  COCO_ARRAYLIST_H
#include  "ArrayList.h"
#endif

EXTC_BEGIN

typedef struct CcNodeType_s CcNodeType_t;
typedef struct CcGraph_s CcGraph_t;
extern const CcObjectType_t * node_alt;
extern const CcObjectType_t * node_iter;
extern const CcObjectType_t * node_opt;
extern const CcObjectType_t * node_eps;

struct CcNodeType_s {
    CcObjectType_t base;
    CcsBool_t (* deletable)(CcNode_t * self);
};

CcsBool_t CcNode_Deletable(CcNode_t * self);
CcsBool_t CcNode_NoDeletable(CcNode_t * self);

struct CcNode_s {
    CcObject_t   base;
    CcNode_t   * next;
    CcNode_t   * down;
    CcNode_t   * sub;
    CcsBool_t    up;
    int          line;
};

/* Deletablity checks */
CcsBool_t CcNode_DelGraph(CcNode_t * self);
CcsBool_t CcNode_DelSubGraph(CcNode_t * self);
CcsBool_t CcNode_DelNode(CcNode_t * self);

struct CcGraph_s {
    CcNode_t * head;
    CcNode_t * r;
};

CcGraph_t * CcGraph(void);
CcGraph_t * CcGraphP(CcNode_t * p);
void CcGraph_Destruct(CcGraph_t * self);

typedef struct {
    CcArrayList_t nodes;
}  CcEBNF_t;

CcEBNF_t * CcEBNF(CcEBNF_t * self);
void CcEBNF_Destruct(CcEBNF_t * self);

CcNode_t * CcEBNF_NewNode(CcEBNF_t * self, const CcObjectType_t * type, ...);

CcNode_t * CcEBNF_MakeFirstAlt(CcEBNF_t * self, CcGraph_t * g);
CcNode_t * CcEBNF_MakeAlternative(CcEBNF_t * self, CcGraph_t * g1, CcGraph_t * g2);
void CcEBNF_MakeSequence(CcEBNF_t * self, CcGraph_t * g1, CcGraph_t * g2);
CcNode_t * CcEBNF_MakeIteration(CcEBNF_t * self, CcGraph_t * g);
CcNode_t * CcEBNF_MakeOption(CcEBNF_t * self, CcGraph_t * g);
void CcEBNF_Finish(CcEBNF_t * self, CcGraph_t * g);

EXTC_END

#endif /* COCO_EBNF_H */
